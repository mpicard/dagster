# ########################
# ##### BLACK
# ########################

# [Docs root]
#   https://black.readthedocs.io/en/stable/
# [Config option reference]
#   https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#command-line-options

[tool.black]
line-length = 100

# Enable "preview" mode-- this adds style rules likely to be incorporated into black's next major
# release. The reason for enabling this, as of 2022-12-04, is to turn on formatting of long string
# literals.
preview = true

# Black will refuse to run if it's not this version.
required-version = "22.10.0"

# Ensure black's output will be compatible with all listed versions.
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']

# ########################
# ##### MYPY
# ########################

# [Docs root]
#   https://mypy.readthedocs.io/en/stable/index.html
# [Config option reference]
#   https://mypy.readthedocs.io/en/stable/config_file.html#the-mypy-configuration-file

[tool.mypy]

# Allow variables to be redefined with arbitrary types even if they already are typed.
allow_redefinition = true

# Allow for use of type annotations in local variables inside function bodies even when the
# signature is not annotated.
disable_error_code = ['annotation-unchecked']

# Ignore cases where mypy cannot resolve *the types* for a given import. Note that this is different
# than not being able to resolve the import at runtime. A module can be installed, but mypy will
# consider it unresolveable if it does not either (a) have a `py.typed` marker file; (b) have
# a corresponding stub package (i.e. named `types-XXX`) available to mypy. Because Dagster uses
# has several dependencies that do not satisfy either criterion, mypy will by default emit errors
# when it encounters imports of those dependencies. Since there's no way to fix these, we silence
# them.
ignore_missing_imports = true

# If a type stub package is missing from the environment but available on typeshed, automatically
# install it. Note that without `--non-interactive` this will prompt the user.
install_types = true

# Allow PEP-420-style namespace packages. Without this enabled, different parts of a namespace
# package will trigger "Duplicate module" errors.
namespace_packages = true

# Print codes (e.g. "[arg-type]") for each error in output.
show_error_codes = true

[tool.pytest.ini_options]

filterwarnings = [
  "ignore::dagster.ExperimentalWarning",
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
  "ignore::pytest.PytestCollectionWarning",
]

# ########################
# ##### PYRIGHT
# ########################

# [Docs root]
#   https://github.com/microsoft/pyright/tree/main/docs
# [Config option reference]
#   https://github.com/microsoft/pyright/blob/main/docs/configuration.md

# Pyright does not have a docs site, but the documentation (a collection of
# markdown files in the GH repo, linked above) is pretty thorough.

[tool.pyright]

include = [
  # ".buildkite/dagster-buildkite",
  # "python_modules/*",
  # "examples/*",
  # "integration_tests/*",
  # "scripts/*",
  "python_modules/libraries/dagster-airbyte",
]

# Unfortunately pyright does not offer a way to extend the default exclusions, so we have to
# reiterate them here if we want to add anything else.
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "**/.tox",
  ".git",
  "**/.venv*",
  ".buildkite/**/.tox",
  "python_modules/libraries/dagster-airflow",
  "python_modules/libraries/dagster-gcp",
  "python_modules/libraries/dagster-ge",
]

# Set to false to help us during the transition from mypy to pyright. Mypy does
# not analyze unannotated functions by default, and so as of 2022-12 the
# codebase contains a large number of type errors in unannotated functions.
# Over time we will opt individual files into `analyzeUnannotatedFunctions` by
# placing `# pyright: skipUnannotatedFunctions=true` at the top of individual
# files. Eventually we can turn off this setting entirely.
analyzeUnannotatedFunctions = true

# Use "basic" ruleset. This differs from strict in several ways, but most
# importantly it does not flag untyped code as an error.
typeCheckingMode = "basic"

# We use ruff for this.
reportInvalidStringEscapeSequence = false

# echo "{ root = \"$x\", extraPaths = [\"${x}.tox/py39/lib/python3.9/site-packages\"] }"

executionEnvironments = [
  
  # buildkite
  { root = ".buildkite/dagster-buildkite/", extraPaths = [".buildkite/dagster-buildkite/.tox/py39/lib/python3.9/site-packages"] },

  # examples
  { root = "examples/assets_dbt_python/", extraPaths = ["examples/assets_dbt_python/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/assets_modern_data_stack/", extraPaths = ["examples/assets_modern_data_stack/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/assets_pandas_pyspark/", extraPaths = ["examples/assets_pandas_pyspark/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/assets_pandas_type_metadata/", extraPaths = ["examples/assets_pandas_type_metadata/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/assets_reconciliation/", extraPaths = ["examples/assets_reconciliation/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/assets_smoke_test/", extraPaths = ["examples/assets_smoke_test/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/deploy_docker/", extraPaths = ["examples/deploy_docker/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/deploy_ecs/", extraPaths = ["examples/deploy_ecs/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/deploy_k8s/", extraPaths = ["examples/deploy_k8s/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/development_to_production/", extraPaths = ["examples/development_to_production/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/docs_snippets/", extraPaths = ["examples/docs_snippets/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/feature_graph_backed_assets/", extraPaths = ["examples/feature_graph_backed_assets/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/project_fully_featured/", extraPaths = ["examples/project_fully_featured/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/quickstart_etl/", extraPaths = ["examples/quickstart_etl/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/tutorial_dbt_dagster/", extraPaths = ["examples/tutorial_dbt_dagster/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/tutorial_notebook_assets/", extraPaths = ["examples/tutorial_notebook_assets/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/with_airflow/", extraPaths = ["examples/with_airflow/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/with_great_expectations/", extraPaths = ["examples/with_great_expectations/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/with_pyspark/", extraPaths = ["examples/with_pyspark/.tox/py39/lib/python3.9/site-packages"] },
  { root = "examples/with_pyspark_emr/", extraPaths = ["examples/with_pyspark_emr/.tox/py39/lib/python3.9/site-packages"] },

  # python_modules
  { root = "python_modules/automation/", extraPaths = ["python_modules/automation/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/dagit/", extraPaths = ["python_modules/dagit/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/dagster/", extraPaths = ["python_modules/dagster/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/dagster-graphql/", extraPaths = ["python_modules/dagster-graphql/.tox/py39/lib/python3.9/site-packages"] },

  # python_modules/libraries
  { root = "python_modules/libraries/dagster-airbyte/", extraPaths = ["python_modules/libraries/dagster-airbyte/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-airflow/", extraPaths = ["python_modules/libraries/dagster-airflow/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-aws/", extraPaths = ["python_modules/libraries/dagster-aws/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-azure/", extraPaths = ["python_modules/libraries/dagster-azure/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-celery-docker/", extraPaths = ["python_modules/libraries/dagster-celery-docker/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-celery-k8s/", extraPaths = ["python_modules/libraries/dagster-celery-k8s/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-celery/", extraPaths = ["python_modules/libraries/dagster-celery/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-census/", extraPaths = ["python_modules/libraries/dagster-census/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-dask/", extraPaths = ["python_modules/libraries/dagster-dask/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-databricks/", extraPaths = ["python_modules/libraries/dagster-databricks/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-datadog/", extraPaths = ["python_modules/libraries/dagster-datadog/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-datahub/", extraPaths = ["python_modules/libraries/dagster-datahub/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-dbt/", extraPaths = ["python_modules/libraries/dagster-dbt/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-docker/", extraPaths = ["python_modules/libraries/dagster-docker/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-duckdb-pandas/", extraPaths = ["python_modules/libraries/dagster-duckdb-pandas/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-duckdb-pyspark/", extraPaths = ["python_modules/libraries/dagster-duckdb-pyspark/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-duckdb/", extraPaths = ["python_modules/libraries/dagster-duckdb/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-fivetran/", extraPaths = ["python_modules/libraries/dagster-fivetran/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-gcp/", extraPaths = ["python_modules/libraries/dagster-gcp/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-ge/", extraPaths = ["python_modules/libraries/dagster-ge/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-github/", extraPaths = ["python_modules/libraries/dagster-github/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-k8s/", extraPaths = ["python_modules/libraries/dagster-k8s/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-managed-elements/", extraPaths = ["python_modules/libraries/dagster-managed-elements/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-mlflow/", extraPaths = ["python_modules/libraries/dagster-mlflow/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-msteams/", extraPaths = ["python_modules/libraries/dagster-msteams/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-mysql/", extraPaths = ["python_modules/libraries/dagster-mysql/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-pagerduty/", extraPaths = ["python_modules/libraries/dagster-pagerduty/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-pandas/", extraPaths = ["python_modules/libraries/dagster-pandas/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-pandera/", extraPaths = ["python_modules/libraries/dagster-pandera/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-papertrail/", extraPaths = ["python_modules/libraries/dagster-papertrail/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-postgres/", extraPaths = ["python_modules/libraries/dagster-postgres/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-prometheus/", extraPaths = ["python_modules/libraries/dagster-prometheus/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-pyspark/", extraPaths = ["python_modules/libraries/dagster-pyspark/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-shell/", extraPaths = ["python_modules/libraries/dagster-shell/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-slack/", extraPaths = ["python_modules/libraries/dagster-slack/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-snowflake-pandas/", extraPaths = ["python_modules/libraries/dagster-snowflake-pandas/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-snowflake/", extraPaths = ["python_modules/libraries/dagster-snowflake/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-spark/", extraPaths = ["python_modules/libraries/dagster-spark/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-ssh/", extraPaths = ["python_modules/libraries/dagster-ssh/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagster-twilio/", extraPaths = ["python_modules/libraries/dagster-twilio/.tox/py39/lib/python3.9/site-packages"] },
  { root = "python_modules/libraries/dagstermill/", extraPaths = ["python_modules/libraries/dagstermill/.tox/py39/lib/python3.9/site-packages"] },

]

# ########################
# ##### RUFF
# ########################

# [Docs root]
#   https://github.com/charliermarsh/ruff#ruff
# [Config option reference]
#   https://github.com/charliermarsh/ruff#reference
#
# As of 2022-12-05, the entire documentation of Ruff is in its very long
# README.

[tool.ruff]

ignore = [

  # (non-google docstring)  These docstring rules are collectively incompatible
  # with the Google-style docstrings we use. List taken from:
  # https://github.com/charliermarsh/ruff#does-ruff-support-numpy--or-google-style-docstrings
  "D203",
  "D204",
  "D213",
  "D215",
  "D400",
  "D404",
  "D406",
  "D407",
  "D408",
  "D409",
  "D413",

  # (missing public docstrings) These work off of the Python sense of "public", rather than our
  # bespoke definition based off of `@public`. When ruff supports custom plugins then we can write
  # appropriate rules to require docstrings for `@public`.
  "D100",
  "D101",
  "D102",
  "D103",
  "D105",
  "D106",
  "D107",

  # (module level import not at top) There are several places where we use e.g.
  # warnings.filterwarings calls before imports.
  "E402", 

  # (line too long): This fires for comments, which black won't wrap.
  # Disabling until there is an autoformat solution available for comments.
  "E501",

  # (no type comparison): There are a few places where we use `== type(None)` which are more clear
  # than the equivalent `isinstance` check.
  'E721',

  # (bare exception): There are many places where we want to catch a maximally generic exception.
  'E722',

  # (no assign lambda): existing code assigns lambdas in a few places. With black formatting
  # requiring extra empty lines between defs, disallowing lambda assignment can make code less
  # readable.
  "E731",

  # (no redundant alias) Allow redundant import aliases for explicit re-exports.
  "PLC0414",

  # (use from for submodule imports) Sometimes it is clearer to import a submodule directly.
  "PLR0402",

  ##### TEMPORARY DISABLES

  # (assorted docstring rules) There are too many violations of these to enable
  # right now, but we should enable after fixing the violations.
  "D200",  # (one-line docstring should fit)
  "D205",  # (blank line after summary)
  "D212",  # (multi-line docstring summary should start at 1st line)
  "D415",  # (docstring summary should end with a period)
  "D417",  # (missing arg in docstring)

  # (buggy docstring rules) These rules should be enabled when bugs with them are fixed.
  "D207", # (under-indented docstring)
  "D208", # (over-indented docstring)

  # (disallow print statements) Allowing until there are file-scoped error-specific ignores and we
  # can bulk-convert our pylint disables.
  "T201",  # (no print call)
  "T203",  # (no pprint call)

  # (local variable assigned but never used): This happens a lot in the docs snippets for didactic
  # purposes. We are putting it in the global rather than file-specific ignore pending resolution of
  # a bug with file-specific ignores.
  "F841",

]

# Match black. Note that this also checks comment line length, but black does not format comments.
line-length = 100

# By default, ruff only uses all "E" (pycodestyle) and "F" (pyflakes) rules.
# Here we append to the defaults.
select = [

  # (pydocstyle) Docstring-related rules. See above ignore section for selected
  # exclusions that sculpt the rules to fit Google-style docstrings. See:
  # https://github.com/charliermarsh/ruff#does-ruff-support-numpy--or-google-style-docstrings
  "D",

  # (pycodestyle) use all pycodestyle rules
  "E",

  # (pyflakes) use all pyflakes rules
  "F",

  # (isort) detect improperly sorted imports
  "I001",

  # (pylint) use all pylint rules (ruff currently implements only a subset of
  # pylint's rules)
  "PLC",
  "PLE",
  "PLR",
  "PLW",

  # (no commented out code) keep commented out code blocks out of the codebase
  # "ERA001",

  # (ruff-specific) Enable all ruff-specific checks (i.e. not ports of
  # functionality from an existing linter).
  "RUF",

  # (disallow print statements) keep debugging statements out of the codebase
  "T",

]

[tool.ruff.isort]

# Combine multiple `from foo import bar as baz` statements with the same source
# (`foo`) into a single statement.
combine-as-imports = true

# Imports of the form `from foo import bar as baz` show one `import bar as baz`
# per line. Useful for __init__.py files that just re-export symbols.
force-wrap-aliases = true

# Ensures ruff classifies imports from `dagster` as first-party in all environments. Without this
# there can be differences between buildkite and local dev.
known-first-party = ["dagster"]
